// Data Management
let books = [
    { 
        id: 1, 
        title: "Java Programming", 
        author: "Oracle Corporation", 
        isbn: "9787134685991", 
        publisher: "Oracle Press", 
        year: 2020, 
        quantity: 5, 
        borrowed: 0, 
        description: "T√†i li·ªáu v·ªÅ l·∫≠p tr√¨nh Java" 
    },
    { 
        id: 2, 
        title: "Clean Code", 
        author: "Robert C. Martin", 
        isbn: "9787132350884", 
        publisher: "Prentice Hall", 
        year: 2008, 
        quantity: 3, 
        borrowed: 0, 
        description: "H∆∞·ªõng d·∫´n vi·∫øt code s·∫°ch" 
    },
    { 
        id: 3, 
        title: "Design Patterns", 
        author: "Gang of Four", 
        isbn: "9787201633610", 
        publisher: "Addison-Wesley", 
        year: 1994, 
        quantity: 2, 
        borrowed: 0, 
        description: "C√°c m·∫´u thi·∫øt k·∫ø ph·∫ßn m·ªÅm" 
    }
];

let borrows = [];

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    loadDataFromStorage();
    updateBooksTable();
    updateBorrowsTable();
    updateStats();
});

// Data Persistence Functions
function saveDataToStorage() {
    localStorage.setItem('libraryBooks', JSON.stringify(books));
    localStorage.setItem('libraryBorrows', JSON.stringify(borrows));
}

function loadDataFromStorage() {
    try {
        const savedBooks = localStorage.getItem('libraryBooks');
        if (savedBooks) {
            books = JSON.parse(savedBooks);
        }
        
        const savedBorrows = localStorage.getItem('libraryBorrows');
        if (savedBorrows) {
            borrows = JSON.parse(savedBorrows);
        }
    } catch (error) {
        console.error('Error loading data from storage:', error);
    }
}

// Tab Management
function showTab(tab, action = null) {
    // Hide all tabs
    document.querySelectorAll('[id$="-tab"]').forEach(t => t.classList.add('d-none'));
    
    // Show selected tab
    const selectedTab = document.getElementById(`${tab}-tab`);
    if (selectedTab) {
        selectedTab.classList.remove('d-none');
    }
    
    // Execute action if specified
    if (action === 'add') {
        if (tab === 'books') showAddBookForm();
        else if (tab === 'borrows') showAddBorrowForm();
    }
}

// Book Management Functions
function showAddBookForm() {
    const form = document.getElementById("add-book-form");
    if (form) {
        form.classList.remove('d-none');
        // Reset form
        form.querySelectorAll("input, textarea").forEach(input => {
            input.value = "";
            input.classList.remove('error');
        });
        
        // Reset submit button text
        const submitBtn = form.querySelector("button[type='submit']");
        if (submitBtn) {
            submitBtn.innerHTML = "üíæ L∆∞u s√°ch";
            form.onsubmit = addBook;
        }
    }
}

function hideAddBookForm() {
    const form = document.getElementById("add-book-form");
    if (form) {
        form.classList.add('d-none');
    }
}

function addBook(event) {
    event.preventDefault();
    
    try {
        const newBook = {
            id: Date.now(),
            title: document.getElementById("book-title").value.trim(),
            author: document.getElementById("book-author").value.trim(),
            isbn: document.getElementById("book-isbn").value.trim(),
            publisher: document.getElementById("book-publisher").value.trim(),
            year: parseInt(document.getElementById("book-year").value) || null,
            quantity: parseInt(document.getElementById("book-quantity").value),
            borrowed: 0,
            description: document.getElementById("book-description").value.trim()
        };
        
        // Validate required fields
        if (!newBook.title || !newBook.author || !newBook.quantity) {
            alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!");
            return;
        }
        
        books.push(newBook);
        saveDataToStorage();
        updateBooksTable();
        updateBorrowsTable();
        updateStats();
        hideAddBookForm();
        
        alert("‚úÖ ƒê√£ th√™m s√°ch th√†nh c√¥ng!");
    } catch (error) {
        console.error('Error adding booking:', error);
        alert("‚ùå C√≥ l·ªói x·∫£y ra khi th√™m s√°ch!");
    }
}

function editBook(id) {
    const book = books.find(b => b.id == id);
    if (book) {
        // Fill form with book data
        document.getElementById("book-title").value = book.title;
        document.getElementById("book-author").value = book.author;
        document.getElementById("book-isbn").value = book.isbn || "";
        document.getElementById("book-publisher").value = book.publisher || "";
        document.getElementById("book-year").value = book.year || "";
        document.getElementById("book-quantity").value = book.quantity;
        document.getElementById("book-description").value = book.description || "";
        
        // Change submit button to update mode
        const submitBtn = document.querySelector("#add-book-form button[type='submit']");
        if (submitBtn) {
            submitBtn.innerHTML = "üíæ C·∫≠p nh·∫≠t s√°ch";
            document.querySelector("#add-book-form form").onsubmit = function(e) { 
                updateBook(e, id); 
            };
        }
        
        showAddBookForm();
    }
}

function updateBook(event, id) {
    event.preventDefault();
    
    try {
        const bookIndex = books.findIndex(b => b.id == id);
        if (bookIndex !== -1) {
            books[bookIndex].title = document.getElementById("book-title").value.trim();
            books[bookIndex].author = document.getElementById("book-author").value.trim();
            books[bookIndex].isbn = document.getElementById("book-isbn").value.trim();
            books[bookIndex].publisher = document.getElementById("book-publisher").value.trim();
            books[bookIndex].year = parseInt(document.getElementById("book-year").value) || null;
            books[bookIndex].quantity = parseInt(document.getElementById("book-quantity").value);
            books[bookIndex].description = document.getElementById("book-description").value.trim();
            
            saveDataToStorage();
            updateBooksTable();
            updateBorrowsTable();
            updateStats();
            hideAddBookForm();
            
            alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!");
        }
    } catch (error) {
        console.error('Error updating book:', error);
        alert("‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s√°ch!");
    }
}

function deleteBook(id) {
    if (confirm("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s√°ch n√†y kh√¥ng?\n\nThao t√°c n√†y s·∫Ω x√≥a t·∫•t c·∫£ phi·∫øu m∆∞·ª£n li√™n quan!")) {
        try {
            books = books.filter(b => b.id != id);
            borrows = borrows.filter(b => b.bookId != id);
            
            saveDataToStorage();
            updateBooksTable();
            updateBorrowsTable();
            updateStats();
            
            alert("‚úÖ ƒê√£ x√≥a s√°ch th√†nh c√¥ng!");
        } catch (error) {
            console.error('Error deleting book:', error);
            alert("‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a s√°ch!");
        }
    }
}

function updateBooksTable() {
    const table = document.getElementById("books-table");
    if (!table) return;
    
    table.innerHTML = "";

    if (books.length === 0) {
        const alert = document.getElementById("no-books-menu");
        if (alert) alert.classList.remove('d-none');
        return;
    }

    const alert = document.getElementById("no-books-menu");
    if (alert) alert.classList.add('d-none');
    
    table.innerHTML = `
        <thead>
            <tr>
                <th>Ti√™u ƒë·ªÅ</th>
                <th>T√°c gi·∫£</th>
                <th>ISBN</th>
                <th>Nh√† xu·∫•t b·∫£n</th>
                <th>T√¨nh tr·∫°ng</th>
                <th>C√≤n l·∫°i</th>
                <th>Thao t√°c</th>
            </tr>
        </thead>
        <tbody></tbody>
    `;

    const tbody = table.querySelector("tbody");
    books.forEach(book => {
        const borrowedCount = borrows.filter(b => b.bookId == book.id && b.status === "ƒêang m∆∞·ª£n").length;
        const available = book.quantity - borrowedCount;
        const status = available > 0 ? "C√≥ s·∫µn" : "H·∫øt s√°ch";
        const statusClass = available > 0 ? "success" : "danger";
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${book.title}</td>
            <td>${book.author}</td>
            <td>${book.isbn || 'N/A'}</td>
            <td>${book.publisher || 'N/A'}</td>
            <td><span class="badge badge-${statusClass}">${status}</span></td>
            <td>${available}</td>
            <td>
                <button class="btn btn-primary me-1" onclick="editBook(${book.id})" style="padding: 0.25rem 0.5rem;">‚úèÔ∏è</button>
                <button class="btn btn-danger" onclick="deleteBook(${book.id})" style="padding: 0.25rem 0.5rem;">üóëÔ∏è</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function filterBooks(searchInput = null) {
    try {
        let searchFilter = "";
        let statusFilter = "";
        
        if (searchInput) {
            searchFilter = searchInput.value.toLowerCase().trim();
        } else {
            const searchElement = document.getElementById("search-books");
            if (searchElement) {
                searchFilter = searchElement.value.toLowerCase().trim();
            }
        }
        
        const statusFilterElement = document.getElementById("book-status-filter");
        if (statusFilterElement) {
            statusFilter = statusFilterElement.value;
        }
        
        const rows = document.querySelectorAll("#books-table tbody tr");
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            const availableCell = row.cells[5];
            const availableText = availableCell ? availableCell.textContent : "";
            
            const matchesSearch = !searchFilter || text.includes(searchFilter);
            let matchesStatus = true;
            
            if (statusFilter === "available") {
                matchesStatus = !availableText.includes("0");
            } else if (statusFilter === "unavailable") {
                matchesStatus = availableText.includes("0");
            }
            
            row.style.display = (matchesSearch && matchesStatus) ? "" : "none";
        });
    } catch (error) {
        console.error('Error filtering books:', error);
    }
}

// Borrow Management Functions
function showAddBorrowForm() {
    const form = document.getElementById("add-borrow-form");
    if (form) {
        form.classList.remove('d-none');
        document.getElementById("borrow-user").value = "";
        document.getElementById("borrow-date").value = "";  
        document.getElementById("borrow-due").value = "";
        updateBookDropdown();
    }
}

function hideAddBorrowForm() {
    const form = document.getElementById("add-borrow-form");
    if (form) {
        form.classList.add('d-none');
    }
}

function updateBookDropdown() {
    const dropdown = document.getElementById("borrow-book");
    if (!dropdown) return;
    
    dropdown.innerHTML = "";
    
    books.forEach(book => {
        const borrowedCount = borrows.filter(b => b.bookId == book.id && b.status === "ƒêang m∆∞·ª£n").length;
        const available = book.quantity - borrowedCount;
        if (available > 0) {
            dropdown.innerHTML += `<option value="${book.id}">${book.title} - ${available} c√≤n l·∫°i</option>`;
        }
    });
}

function addBorrow(event) {
    event.preventDefault();
    
    try {
        const bookId = parseInt(document.getElementById("borrow-book").value);
        const userName = document.getElementById("borrow-user").value.trim();
        const borrowDate = document.getElementById("borrow-date").value;
        const dueDate = document.getElementById("borrow-due").value;
        
        if (!userName || !borrowDate || !dueDate) {
            alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }
        
        if (new Date(dueDate) <= new Date(borrowDate)) {
            alert("Ng√†y h·∫πn tr·∫£ ph·∫£i sau ng√†y m∆∞·ª£n!");
            return;
        }
        
        const book = books.find(b => b.id == bookId);
        if (!book) {
            alert("Kh√¥ng t√¨m th·∫•y s√°ch ƒë∆∞·ª£c ch·ªçn!");
            return;
        }
        
        const newBorrow = {
            id: Date.now(),
            userName: userName,
            bookId: bookId,
            bookTitle: book.title,
            borrowDate: borrowDate,
            dueDate: dueDate,
            returnDate: null,
            status: "ƒêang m∆∞·ª£n"
        };
        
        borrows.push(newBorrow);
        
        saveDataToStorage();
        updateBorrowsTable();
        updateBooksTable();
        updateStats();
        hideAddBorrowForm();
        
        alert("‚úÖ ƒê√£ t·∫°o phi·∫øu m∆∞·ª£n th√†nh c√¥ng!");
    } catch (error) {
        console.error('Error adding borrow:', error);
        alert("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o phi·∫øu m∆∞·ª£n!");
    }
}

function returnBook(id) {
    if (confirm("X√°c nh·∫≠n tr·∫£ s√°ch n√†y?")) {
        try {
            const borrow = borrows.find(b => b.id == id);
            if (borrow) {
                borrow.status = "ƒê√£ tr·∫£";
                borrow.returnDate = new Date().toISOString().split('T')[0];
                
                saveDataToStorage();
                updateBorrowsTable();
                updateBooksTable();
                updateStats();
                
                alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i tr·∫£ s√°ch!");
            }
        } catch (error) {
            console.error('Error returning book:', error);
            alert("‚ùå C√≥ l·ªói x·∫£y ra khi tr·∫£ s√°ch!");
        }
    }
}

function updateBorrowsTable() {
    const table = document.getElementById("borrows-table");
    if (!table) return;
    
    table.innerHTML = "";

    if (borrows.length === 0) {
        const alert = document.getElementById("no-borrows-menu");
        if (alert) alert.classList.remove('d-none');
        return;
    }

    const alert = document.getElementById("no-borrows-menu");
    if (alert) alert.classList.add('d-none');
    
    table.innerHTML = `
        <thead>
            <tr>
                <th>Ng∆∞·ªùi m∆∞·ª£n</th>
                <th>S√°ch</th>
                <th>Ng√†y m∆∞·ª£n</th>
                <th>Ng√†y h·∫πn</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Thao t√°c</th>
            </tr>
        </thead>
        <tbody></tbody>
    `;

    const tbody = table.querySelector("tbody");
    borrows.forEach(borrow => {
        const canReturn = borrow.status === "ƒêang m∆∞·ª£n";
        const isOverdue = canReturn && new Date(borrow.dueDate) < new Date();
        
        const row = document.createElement('tr');
        if (isOverdue) {
            row.style.backgroundColor = '#fff3cd';
        }
        
        row.innerHTML = `
            <td>${borrow.userName}</td>
            <td>${borrow.bookTitle}</td>
            <td>${borrow.borrowDate}</td>
            <td>${borrow.dueDate}</td>
            <td>
                ${borrow.status}
                ${isOverdue ? ' <span class="badge badge-danger">Qu√° h·∫°n</span>' : ''}
            </td>
            <td>
                ${canReturn ? `<button class="btn btn-success" onclick="returnBook(${borrow.id})">‚úÖ Tr·∫£ s√°ch</button>` : ''}
            </td>
        `;
        tbody.appendChild(row);
    });
}

// Statistics Update
function updateStats() {
    try {
        const totalBooksElement = document.getElementById("total-books");
        const totalUsersElement = document.getElementById("total-users");
        
        if (totalBooksElement) {
            totalBooksElement.textContent = books.reduce((sum, book) => sum + book.quantity, 0);
        }
        
        if (totalUsersElement) {
            const uniqueUsers = borrows.length > 0 ? [...new Set(borrows.map(b => b.userName))].length : 0;
            totalUsersElement.textContent = uniqueUsers;
        }
    } catch (error) {
        console.error('Error updating stats:', error);
    }
}

// Data Export/Import Functions
function exportData() {
    try {
        const data = {
            books: books,
            borrows: borrows,
            exportDate: new Date().toISOString(),
            version: "1.0",
            totalBooks: books.reduce((sum, book) => sum + book.quantity, 0),
            totalBorrows: borrows.length,
            activeBorrows: borrows.filter(b => b.status === "ƒêang m∆∞·ª£n").length
        };
        
        const dataStr = JSON.stringify(data, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `thu-vien-backup-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        alert("‚úÖ ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!");
    } catch (error) {
        console.error('Error exporting data:', error);
        alert("‚ùå C√≥ l·ªói x·∫£y ra khi xu·∫•t d·ªØ li·ªáu!");
    }
}

function importData() {
    try {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = function(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    if (data.books && data.borrows) {
                        if (confirm(`‚ö†Ô∏è Nh·∫≠p d·ªØ li·ªáu n√†y s·∫Ω thay th·∫ø t·∫•t c·∫£ d·ªØ li·ªáu hi·ªán t·∫°i.\n\nD·ªØ li·ªáu backup:\n- ${data.books.length} s√°ch\n- ${data.borrows.length} phi·∫øu m∆∞·ª£n\n\nTi·∫øp t·ª•c?`)) {
                            books = data.books;
                            borrows = data.borrows;
                            saveDataToStorage();
                            updateBooksTable();
                            updateBorrowsTable();
                            updateStats();
                            alert("‚úÖ ƒê√£ nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!");
                        }
                    } else {
                        alert("‚ùå File kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!");
                    }
                } catch (error) {
                    console.error('Error parsing imported data:', error);
                    alert("‚ùå File kh√¥ng h·ª£p l·ªá!");
                }
            };
            reader.readAsText(file);
        };
        
        input.click();
    } catch (error) {
        console.error('Error importing data:', error);
        alert("‚ùå C√≥ l·ªói x·∫£y ra khi nh·∫≠p d·ªØ li·ªáu!");
    }
}

// Utility Functions
function formatDate(dateString) {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN');
}

function showNotification(message, type = 'success') {
    // Simple notification system
    const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    console.log(`[${type.toUpperCase()}] ${message}`);
}

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
    // Ctrl+S to save data (export)
    if (e.ctrlKey && e.key === 's') {
        e.preventDefault();
        exportData();
    }
});

// Auto-save functionality
setInterval(function() {
    saveDataToStorage();
}, 30000); // Auto-save every 30 seconds

console.log('üìö Th∆∞ vi·ªán PTIT ƒë√£ s·∫µn s√†ng!');
